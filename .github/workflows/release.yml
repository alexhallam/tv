name: Release Process

on:
  push:
    tags:
      - "v*"
      - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  HOMEBREW_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}

jobs:
  validate:
    name: Pre-Release Validation
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.6.5)"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Check CHANGELOG
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! grep -q "^$VERSION (" CHANGELOG.md; then
            echo "❌ Version $VERSION not found in CHANGELOG.md"
            echo "Please add an entry for version $VERSION"
            exit 1
          fi
          echo "✅ CHANGELOG entry found for version $VERSION"

      - name: Check for uncommitted changes
        run: |
          if ! git diff-index --quiet HEAD --; then
            echo "❌ Uncommitted changes detected"
            git status
            exit 1
          fi
          echo "✅ No uncommitted changes"

      - name: Run tests
        run: cargo test

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Build release
        run: cargo build --release

      - name: Validate documentation
        run: |
          # Check if README exists and has content
          if [ ! -f README.md ] || [ ! -s README.md ]; then
            echo "❌ README.md is missing or empty"
            exit 1
          fi

          # Check if docs directory exists
          if [ ! -d docs ]; then
            echo "❌ docs directory is missing"
            exit 1
          fi

          # Check for required documentation files
          for file in docs/RELEASE.md docs/TESTING.md; do
            if [ ! -f "$file" ]; then
              echo "❌ Required documentation file missing: $file"
              exit 1
            fi
          done

          echo "✅ Documentation validation passed"

  build-binaries:
    name: Build Binary Releases
    needs: validate
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux-arm, macos-intel, macos-arm, win-msvc, win32-msvc]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-22.04
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos-intel
          os: macos-13
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-arm
          os: macos-14
          rust: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-2022
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win32-msvc
          os: windows-2022
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        bash ci/ubuntu-install-packages

    - name: Install packages (macOS)
      if: startsWith(matrix.os, 'macos-')
      run: |
        bash ci/macos-install-packages

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Use Cross for Linux ARM
      if: matrix.build == 'linux-arm'
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Use Cross for musl builds
      if: matrix.build == 'linux'
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Set target flags for native builds
      if: matrix.build == 'macos-intel' || matrix.build == 'macos-arm' || matrix.build == 'win-msvc' || matrix.build == 'win32-msvc'
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release --package tidy-viewer ${{ env.TARGET_FLAGS }}

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos-intel' || matrix.build == 'macos-arm'
      run: strip "target/${{ matrix.target }}/release/tidy-viewer"

    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          ghcr.io/cross-rs/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/tidy-viewer

    - name: Build archive
      shell: bash
      run: |
        staging="tv-${{ steps.version.outputs.version }}-${{ matrix.target }}"
        mkdir -p "$staging"/{complete,doc}

        cp {README.md,UNLICENSE} "$staging/"
        cp CHANGELOG.md "$staging/doc/"

        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          echo "Target is Windows Based"
          cp "target/${{ matrix.target }}/release/tidy-viewer.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          echo "Target is not Windows Based"
          cp "target/${{ matrix.target }}/release/tidy-viewer" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-artifact@v3
      with:
        name: binary-${{ matrix.target }}
        path: ${{ env.ASSET }}

  publish:
    name: Publish to Cargo
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-packages:
    name: Build Distribution Packages
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install alien
        run: |
          sudo apt-get update
          sudo apt-get install -y alien

      - name: Build Debian package
        run: cargo deb

      - name: Build RPM package
        run: |
          alien --verbose --to-rpm ./target/debian/tidy-viewer_*_amd64.deb
          mv *.rpm ./target/

      - name: Upload Debian package
        uses: actions/upload-artifact@v3
        with:
          name: debian-package
          path: ./target/debian/*.deb

      - name: Upload RPM package
        uses: actions/upload-artifact@v3
        with:
          name: rpm-package
          path: ./target/*.rpm

  homebrew-update:
    name: Update Homebrew Formulas
    needs: [validate, publish]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get SHA256 of release tarball
        id: sha256
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          wget https://github.com/alexhallam/tv/archive/refs/tags/v$VERSION.tar.gz
          SHA256=$(sha256sum v$VERSION.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "SHA256: $SHA256"

      - name: Update personal homebrew tap
        if: env.HOMEBREW_TOKEN != ''
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SHA256="${{ steps.sha256.outputs.sha256 }}"

          # Clone personal homebrew tap with token
          git clone https://x-access-token:${{ env.HOMEBREW_TOKEN }}@github.com/alexhallam/homebrew-tidy-viewer.git
          cd homebrew-tidy-viewer

          # Update formula
          sed -i "s/version \"[^\"]*\"/version \"$VERSION\"/" tidy-viewer.rb
          sed -i "s/sha256 \"[^\"]*\"/sha256 \"$SHA256\"/" tidy-viewer.rb

          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add tidy-viewer.rb
          git commit -m "Update tidy-viewer to version $VERSION"
          git push origin main

      - name: Create Homebrew Core PR
        if: env.HOMEBREW_TOKEN != ''
        env:
          GH_TOKEN: ${{ env.HOMEBREW_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SHA256="${{ steps.sha256.outputs.sha256 }}"

          # Install gh if missing
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y gh
          fi

          # Clone personal homebrew-core fork with token
          git clone https://x-access-token:${{ env.HOMEBREW_TOKEN }}@github.com/alexhallam/homebrew-core.git
          cd homebrew-core

          # Fetch upstream
          git remote add upstream https://github.com/Homebrew/homebrew-core.git
          git fetch upstream
          git checkout main
          git merge upstream/main

          # Update formula
          sed -i "s/version \"[^\"]*\"/version \"$VERSION\"/" Formula/t/tidy-viewer.rb
          sed -i "s/sha256 \"[^\"]*\"/sha256 \"$SHA256\"/" Formula/t/tidy-viewer.rb

          # Create branch and push
          git checkout -b tidy-viewer-$VERSION
          git add Formula/t/tidy-viewer.rb
          git commit -m "tidy-viewer: update $VERSION bottle"
          git push origin tidy-viewer-$VERSION

          # Create PR using gh
          gh pr create --title "tidy-viewer: update $VERSION bottle" --body "Update tidy-viewer to version $VERSION"

  post-release:
    name: Post-Release Verification and Asset Upload
    needs: [publish, build-packages, homebrew-update, build-binaries]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify crates.io publication
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sleep 30  # Wait for crates.io to update

          # Check if version is available on crates.io
          if ! curl -s "https://crates.io/api/v1/crates/tidy-viewer" | grep -q "\"version\":\"$VERSION\""; then
            echo "❌ Version $VERSION not yet available on crates.io"
            exit 1
          fi
          echo "✅ Version $VERSION published to crates.io"

      - name: Download all binary artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: find ./artifacts -type f -name "*" | head -20

      - name: Create GitHub Release and upload all assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's New in Version ${{ steps.version.outputs.version }}

            See [CHANGELOG.md](https://github.com/alexhallam/tv/blob/main/CHANGELOG.md) for detailed changes.

            ## Installation

            ### Package Managers
            ```bash
            # Via Cargo
            cargo install tidy-viewer

            # Via Homebrew
            brew install tidy-viewer
            ```

            ### Direct Downloads

            Download the appropriate binary for your platform from the assets below:

            - **Linux (x86_64)**: `tv-${{ steps.version.outputs.version }}-x86_64-unknown-linux-musl.tar.gz`
            - **Linux (ARM)**: `tv-${{ steps.version.outputs.version }}-arm-unknown-linux-gnueabihf.tar.gz`
            - **macOS (Intel)**: `tv-${{ steps.version.outputs.version }}-x86_64-apple-darwin.tar.gz`
            - **macOS (Apple Silicon)**: `tv-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.gz`
            - **Windows (64-bit)**: `tv-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip`
            - **Windows (32-bit)**: `tv-${{ steps.version.outputs.version }}-i686-pc-windows-msvc.zip`

            Extract the downloaded archive and copy the `tidy-viewer` binary to your PATH.

            ### Package Downloads
            - **Debian/Ubuntu**: Download the `.deb` package
            - **RHEL/CentOS/Fedora**: Download the `.rpm` package
          draft: false
          prerelease: false
          files: |
            ./artifacts/binary-*/tv-*
            ./artifacts/debian-package/*.deb
            ./artifacts/rpm-package/*.rpm
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Success Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "🎉 Release $VERSION completed successfully!"
          echo ""
          echo "✅ Published to crates.io"
          echo "✅ Built cross-platform binaries for:"
          echo "   - Linux (x86_64 musl)"
          echo "   - Linux (ARM)"
          echo "   - macOS (Intel)"
          echo "   - macOS (Apple Silicon)"
          echo "   - Windows (64-bit)"
          echo "   - Windows (32-bit)"
          echo "✅ Built Debian and RPM packages"
          echo "✅ Updated Homebrew formulas"
          echo "✅ Created GitHub release with all assets"
          echo ""
          echo "📦 Installation options:"
          echo "  cargo install tidy-viewer"
          echo "  brew install tidy-viewer"
          echo "  Download binaries from: https://github.com/alexhallam/tv/releases/tag/v$VERSION"
