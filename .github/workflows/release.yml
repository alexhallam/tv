name: Release Process

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate:
    name: Pre-Release Validation
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.6.5)"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Check CHANGELOG
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! grep -q "^$VERSION (" CHANGELOG.md; then
            echo "❌ Version $VERSION not found in CHANGELOG.md"
            echo "Please add an entry for version $VERSION"
            exit 1
          fi
          echo "✅ CHANGELOG entry found for version $VERSION"

      - name: Check for uncommitted changes
        run: |
          if ! git diff-index --quiet HEAD --; then
            echo "❌ Uncommitted changes detected"
            git status
            exit 1
          fi
          echo "✅ No uncommitted changes"

      - name: Run tests
        run: cargo test

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Build release
        run: cargo build --release

      - name: Validate documentation
        run: |
          # Check if README exists and has content
          if [ ! -f README.md ] || [ ! -s README.md ]; then
            echo "❌ README.md is missing or empty"
            exit 1
          fi
          
          # Check if docs directory exists
          if [ ! -d docs ]; then
            echo "❌ docs directory is missing"
            exit 1
          fi
          
          # Check for required documentation files
          for file in docs/RELEASE.md docs/TESTING.md; do
            if [ ! -f "$file" ]; then
              echo "❌ Required documentation file missing: $file"
              exit 1
            fi
          done
          
          echo "✅ Documentation validation passed"

  publish:
    name: Publish to Cargo
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Cargo uses CARGO_REGISTRY_TOKEN env directly; no need to login
      - name: Publish to crates.io
        run: cargo publish --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ env.CARGO_REGISTRY_TOKEN }}

  build-packages:
    name: Build Distribution Packages
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install alien
        run: |
          sudo apt-get update
          sudo apt-get install -y alien

      - name: Build Debian package
        run: cargo deb

      - name: Build RPM package
        run: |
          alien --verbose --to-rpm ./target/debian/tidy-viewer_*_amd64.deb
          mv *.rpm ./target/

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: ./target/debian/*.deb

      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package
          path: ./target/*.rpm

  homebrew-update:
    name: Update Homebrew Formulas
    needs: [validate, publish]
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get SHA256 of release tarball
        id: sha256
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          wget https://github.com/alexhallam/tv/archive/refs/tags/v$VERSION.tar.gz
          SHA256=$(sha256sum v$VERSION.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "SHA256: $SHA256"

      - name: Update personal homebrew tap
        if: env.GH_TOKEN != ''
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SHA256="${{ steps.sha256.outputs.sha256 }}"
          
          # Clone personal homebrew tap with token
          git clone https://x-access-token:${GH_TOKEN}@github.com/alexhallam/homebrew-tidy-viewer.git
          cd homebrew-tidy-viewer
          
          # Update formula
          sed -i "s/version \"[^\"]*\"/version \"$VERSION\"/" tidy-viewer.rb
          sed -i "s/sha256 \"[^\"]*\"/sha256 \"$SHA256\"/" tidy-viewer.rb
          
          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add tidy-viewer.rb
          git commit -m "Update tidy-viewer to version $VERSION" || echo "No changes to commit"
          git push origin main

      - name: Create Homebrew Core PR
        if: env.GH_TOKEN != ''
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SHA256="${{ steps.sha256.outputs.sha256 }}"
          
          # Clone personal homebrew-core fork with token
          git clone https://x-access-token:${GH_TOKEN}@github.com/alexhallam/homebrew-core.git
          cd homebrew-core
          
          # Fetch upstream
          git remote add upstream https://github.com/Homebrew/homebrew-core.git
          git fetch upstream
          git checkout main
          git merge upstream/main
          
          # Update formula
          sed -i "s/version \"[^\"]*\"/version \"$VERSION\"/" Formula/t/tidy-viewer.rb
          sed -i "s/sha256 \"[^\"]*\"/sha256 \"$SHA256\"/" Formula/t/tidy-viewer.rb
          
          # Create branch and push
          git checkout -b tidy-viewer-$VERSION
          git add Formula/t/tidy-viewer.rb
          git commit -m "tidy-viewer: update $VERSION bottle" || echo "No changes to commit"
          git push origin tidy-viewer-$VERSION
          
          # Create PR
          gh pr create --title "tidy-viewer: update $VERSION bottle" --body "Update tidy-viewer to version $VERSION"

  post-release:
    name: Post-Release Verification
    needs: [publish, build-packages]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify crates.io publication
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sleep 30  # Wait for crates.io to update
          
          # Check if version is available on crates.io
          if ! curl -s "https://crates.io/api/v1/crates/tidy-viewer" | grep -q "\"version\":\"$VERSION\""; then
            echo "❌ Version $VERSION not yet available on crates.io"
            exit 1
          fi
          echo "✅ Version $VERSION published to crates.io"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's New in Version ${{ steps.version.outputs.version }}
            
            See [CHANGELOG.md](https://github.com/alexhallam/tv/blob/main/CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ```bash
            cargo install tidy-viewer
            ```
            
            ## Downloads
            
            - Debian and RPM packages attached as assets below
          draft: false
          prerelease: false

      - name: Download Debian package artifact
        uses: actions/download-artifact@v4
        with:
          name: debian-package
          path: dist

      - name: Download RPM package artifact
        uses: actions/download-artifact@v4
        with:
          name: rpm-package
          path: dist

      - name: Locate release assets
        id: assets
        run: |
          echo "deb_path=$(ls dist/*.deb | head -n1)" >> $GITHUB_OUTPUT
          echo "rpm_path=$(ls dist/*.rpm | head -n1)" >> $GITHUB_OUTPUT
          echo "Found DEB: $(ls dist/*.deb | head -n1)"
          echo "Found RPM: $(ls dist/*.rpm | head -n1)"

      - name: Upload Debian Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.assets.outputs.deb_path }}
          asset_name: tidy-viewer_${{ steps.version.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.assets.outputs.rpm_path }}
          asset_name: tidy-viewer_${{ steps.version.outputs.version }}_amd64.rpm
          asset_content_type: application/x-rpm

      - name: Success Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "🎉 Release $VERSION completed successfully!"
          echo ""
          echo "✅ Published to crates.io"
          echo "✅ Built Debian and RPM packages"
          echo "✅ Created GitHub release"
          echo ""
          echo "📦 Installation:"
          echo "  cargo install tidy-viewer"
          echo "  brew install tidy-viewer"
