searchState.loadedDescShard("itertools", 0, "Extra iterator adaptors, functions and macros.\nBoth values are present.\nContinue folding with this value\nA type returned by the <code>diff_with</code> function.\nFold is complete and will return this value\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nValue that either holds a single A or B, or both.\nThis is the first element.\nThe index of the first non-matching element along with …\nAn enum used for controlling the execution of <code>.fold_while()</code>…\nAn <code>Iterator</code> blanket implementation that provides extra …\nThis is the last element.\nA value of type <code>L</code>.\nOnly the left value of type <code>A</code> is present.\nThe total number of elements that were in <code>I</code> along with the …\nThis is neither the first nor the last element.\nMore than one element in the iterator, the first element …\n<code>MinMaxResult</code> is an enum returned by <code>minmax</code>. See …\nEmpty iterator\nIterator with one element, so the minimum and maximum are …\nThis is the only element.\nAn iterator that allows peeking at an element before …\nA value yielded by <code>WithPosition</code>. Indicates the position of …\nA value of type <code>R</code>.\nOnly the right value of type <code>B</code> is present.\nThe total number of elements that were in <code>J</code> along with the …\nTest whether the predicate holds for all elements in the …\nCheck whether all elements compare equal.\nTest whether the predicate holds for any elements in the …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConverts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nConverts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.\nAssert that two iterables produce equal sequences, with …\nA “meta iterator adaptor”. Its closure receives a …\nIf Both, return <code>Some</code> tuple containing left and right.\nReturn an iterator adaptor that iterates over the …\nCreate an iterator that first iterates <code>i</code> and then <code>j</code>.\nReturn an <em>iterable</em> that can chunk the iterator.\nReturn an iterator over all windows, wrapping back to the …\nCreate an iterator that clones each element from &amp;T to T\nReturn an iterator adaptor that uses the passed-in closure …\nCollects all items from the iterator into a tuple of a …\n<code>.collect_vec()</code> is simply a type specialization of …\nReturn an iterator adaptor that iterates over the <code>k</code>-length …\nReturn an iterator that iterates over the <code>k</code>-length …\nCombine all an iterator’s elements into one element by …\nCombine all an iterator’s elements into one element by …\nCreate an iterator that maps for example iterators of …\nCollect the items in this iterator and return a <code>HashMap</code> …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nCompares every element yielded by both <code>i</code> and <code>j</code> with the …\nConsume the first <code>n</code> elements from the iterator eagerly, …\nConsume the last <code>n</code> elements from the iterator eagerly, and …\nApply one of two functions depending on contents, unifying …\nLike <code>either</code>, but provide some context to whichever of the …\nIterate <code>iterable</code> with a running index.\nReturn <code>true</code> if both iterables produce equal sequences …\nIf the iterator yields exactly one element, that element …\nReturns the left value\nReturns the right value\nFactor out a homogeneous type from an either of pairs.\nFactor out a homogeneous type from an either of pairs.\nReturn an iterator adaptor that filters and transforms …\nReturn an iterator adaptor that filters every <code>Result::Ok</code> …\nFind the position and value of the first element …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nConvert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.\nPerform a fold operation over the iterable.\nAccumulator of the elements in the iterator.\nFold <code>Result</code> values from an iterator.\nFold <code>Option</code> values from an iterator.\nSee <code>.fold_ok()</code>.\nAn iterator method that applies a function, producing a …\nRun the closure <code>f</code> eagerly on each element of the iterator.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an <em>iterable</em> that can group iterator elements. …\nIf <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.\nIf <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.\nCreate an iterator that interleaves elements in <code>i</code> and <code>j</code>.\nAlternate elements from two iterators until both have run …\nAlternate elements from two iterators until at least one …\nAn iterator adaptor to insert a particular value between …\nAn iterator adaptor to insert a particular value created …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …\nReturn an <code>Iterator</code> on a HahMap. Keys mapped to <code>Vec</code>s of …\nConstructs a <code>GroupingMap</code> to be used later with one of the …\nConstructs a <code>GroupingMap</code> to be used later with one of the …\nExtract the value of an either over two equivalent types.\nReturn the inner value.\nReturn the value in the continue or done.\nConvert the inner value to an iterator.\n<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …\nCreate an iterator over the “cartesian product” of …\nIf Right, return true otherwise, return false. Equivalent …\nReturn true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.\nReturn true if the value is the <code>Left</code> variant.\nIf Left, return true otherwise, return false. Exclusive …\nReturn true if the value is the <code>Right</code> variant.\nIf Right, return true otherwise, return false. Exclusive …\nCreates a new iterator that infinitely applies function to …\nCreate an iterator running multiple iterators in lockstep.\nCombine all iterator elements into one String, seperated …\nCombine all iterator elements into one String, separated …\nSort the k smallest elements into a new iterator, in …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nIf <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …\nConvert each item of the iterator using the <code>Into</code> trait.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …\nReturn an iterator adaptor that applies the provided …\nSee <code>.map_ok()</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …\nReturn the maximum value of the iterable.\nCreate an iterator that merges elements in <code>i</code> and <code>j</code>.\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merge-joins items from the …\nCreate an iterator that merges items from both this and …\nReturn the minimum value of the iterable.\nReturn the minimum and maximum elements in the iterator.\nReturn the minimum and maximum element of an iterator, as …\nReturn the minimum and maximum element of an iterator, as …\nReturn an iterator adaptor that iterates over the …\nAn iterator adaptor that allows the user to peek at …\nAn iterator adaptor that allows the user to peek at …\nAn iterator that generalizes <em>.zip()</em> and allows running …\nAdvances the iterator and returns the next items grouped …\nReturn an iterator adaptor that pads the sequence to a …\nPartition a sequence using predicate <code>pred</code> so that elements …\nCollect all iterator elements into one of two partitions. …\nA drop-in replacement for <code>std::iter::Peekable</code> which adds a …\nPass a reference to the next iterator element to the …\nReturn an iterator adaptor that borrows from this iterator …\nReturn an iterator adaptor that iterates over all …\nReturn the position of the maximum element in the iterator.\nReturn the position of the maximum element in the …\nReturn the position of the maximum element in the …\nReturn the position of the minimum element in the iterator.\nReturn the position of the minimum element in the …\nReturn the position of the minimum element in the …\nReturn the positions of the minimum and maximum elements in\nReturn the postions of the minimum and maximum elements of …\nReturn the postions of the minimum and maximum elements of …\nReturn an iterator adaptor that yields the indices of all …\nReturn an iterator that iterates through the powerset of …\n“Lift” a function of the values of an iterator so that …\nIterate over the entire iterator and multiply all the …\nCreate an iterator where you can put back a single item\nCreate an iterator where you can put back multiple values …\nReturn an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.\nReturn either value of left, right, or the product of <code>f</code> …\nAn iterator source that produces elements indefinitely by …\nCreate an iterator that produces <code>n</code> repetitions of <code>element</code>.\nIterate <code>iterable</code> in reverse.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nIf <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nAssign to each reference in <code>self</code> from the <code>from</code> iterator, …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nReturn an iterator adaptor that steps <code>n</code> elements in the …\nThe concrete iterator types.\nIterate over the entire iterator and add all the elements.\nReturn an iterator adaptor that borrows from a <code>Clone</code>-able …\nSplit into an iterator pair that both yield all elements …\nTraits helpful for using certain <code>Itertools</code> methods in …\nAccumulate the elements in the iterator in a tree-like …\n<code>.try_collect()</code> is more convenient way of writing …\nReturn an iterator adaptor that iterates over the …\nReturn an iterator over all contiguous windows producing …\nReturn an iterator that groups the items in tuples of a …\nCreates a new unfold source with the specified closure as …\nReturn an iterator adaptor that filters out elements that …\nReturn an iterator adaptor that filters out elements that …\nReturns the left value\nReturns the right value\nReturn an iterator adaptor that applies a mutating function\nReturn an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nReturn an iterator adaptor that wraps each element in a …\nIterate <code>i</code> and <code>j</code> in lock step.\nIterate <code>i</code> and <code>j</code> in lock step.\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\nA “meta iterator adaptor”. Its closure receives a …\nAn iterator for the elements in a single chunk.\nAn iterator that yields the Chunk iterators.\nAn iterator over all windows,wrapping back to the first …\nAn iterator adaptor that may join together adjacent …\nAn iterator to iterate through all the <code>k</code>-length …\nAn iterator to iterate through all the <code>n</code>-length …\nAn iterator that maps an iterator of tuples like …\nAn iterator adaptor that removes repeated duplicates.\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nIterator returned for the error case of …\nAn iterator adapter to filter and apply a transformation …\nAn iterator adapter to filter values within a nested …\nFormat all iterator elements lazily, separated by <code>sep</code>.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nAn iterator for the elements in a single group.\n<code>GroupBy</code> is the storage for the lazy grouping operation.\n<code>GroupingMap</code> is an intermediate struct for efficient …\n<code>GroupingMapBy</code> is an intermediate struct for efficient …\nAn iterator that yields the Group iterators.\nAn iterator adaptor that alternates elements from two …\nAn iterator adaptor that alternates elements from the two …\nAn iterator adaptor to insert a particular value between …\nAn iterator adaptor to insert a particular value created …\n<code>ChunkLazy</code> is the storage for a lazy chunking operation.\nAn iterator that infinitely applies function to value and …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adapter to apply <code>Into</code> conversion to each …\nAn iterator adapter to apply a transformation within a …\nSee <code>MapOk</code>.\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merge-joins items from the two …\nSee <code>multipeek()</code> for more information.\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that pads a sequence to a minimum …\nSee <code>peek_nth()</code> for more information.\nAn iterator adaptor that takes items while a closure …\nAn iterator adaptor that iterates through all the <code>k</code>…\nAn iterator adapter to get the positions of each element …\nAn iterator to iterate through the powerset of the …\nAn iterator that produces only the <code>T</code> values as long as the …\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that allows putting back a single item …\nAn iterator adaptor that allows putting multiple items in …\nA wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …\nSee <code>repeat_call</code> for more information.\nAn iterator that produces <em>n</em> repetitions of an element.\nAn iterator adaptor that steps a number elements in the …\nAn iterator adaptor that borrows from a <code>Clone</code>-able iterator\nOne half of an iterator pair where both return the same …\nAn iterator over a incomplete tuple.\nAn iterator to iterate through all combinations in a <code>Clone</code>…\nAn iterator over all contiguous windows that produces …\nAn iterator that groups the items in tuples of a specific …\nSee <code>unfold</code> for more information.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to apply a mutating function to each …\nAn iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nAn iterator adaptor that wraps each element in an <code>Position</code>.\nSee <code>multizip</code> for more information.\nAn iterator which iterates two other iterators …\nAn iterator which iterates two other iterators …\nThis is the generic way to perform any operation on a …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a buffer with the produced items that was not …\nSplit the <code>PutBack</code> into its parts.\nReturns the length of a combination produced by this …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturns the (current) length of the pool from which …\nWorks exactly like <code>.next()</code> with the only difference that …\nWorks exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>\nReturns a reference to the <code>nth</code> value without advancing the …\nGroups elements from the <code>GroupingMap</code> source by key and …\nPut back a single value to the front of the iterator.\nPuts x in front of the iterator. The values are yielded in …\nThe boxed iterator.\nReset the peeking “cursor”\nInternal state that will be passed to the closure on the …\nGroups elements from the <code>GroupingMap</code> source by key and …\nput back value <code>value</code> (builder method)\nImplemented for homogeneous tuples of size up to 4.")