(function() {
    var type_impls = Object.fromEntries([["itertools",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GroupingMap%3CI%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#50\">Source</a><a href=\"#impl-Clone-for-GroupingMap%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"itertools/structs/struct.GroupingMap.html\" title=\"struct itertools::structs::GroupingMap\">GroupingMap</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#50\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"itertools/structs/struct.GroupingMap.html\" title=\"struct itertools::structs::GroupingMap\">GroupingMap</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","itertools::grouping_map::GroupingMapBy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GroupingMap%3CI%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#50\">Source</a><a href=\"#impl-Debug-for-GroupingMap%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"itertools/structs/struct.GroupingMap.html\" title=\"struct itertools::structs::GroupingMap\">GroupingMap</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#50\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","itertools::grouping_map::GroupingMapBy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GroupingMap%3CI%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#56-536\">Source</a><a href=\"#impl-GroupingMap%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, K, V&gt; <a class=\"struct\" href=\"itertools/structs/struct.GroupingMap.html\" title=\"struct itertools::structs::GroupingMap\">GroupingMap</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.tuple.html\">(K, V)</a>&gt;,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.aggregate\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#100-113\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.aggregate\" class=\"fn\">aggregate</a>&lt;FO, R&gt;(self, operation: FO) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, R&gt;<div class=\"where\">where\n    FO: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This is the generic way to perform any operation on a <code>GroupingMap</code>.\nIt’s suggested to use this method only to implement custom operations\nwhen the already provided ones are not enough.</p>\n<p>Groups elements from the <code>GroupingMap</code> source by key and applies <code>operation</code> to the elements\nof each group sequentially, passing the previously accumulated value, a reference to the key\nand the current element as arguments, and stores the results in an <code>HashMap</code>.</p>\n<p>The <code>operation</code> function is invoked on each element with the following parameters:</p>\n<ul>\n<li>the current value of the accumulator of the group if there is currently one;</li>\n<li>a reference to the key of the group this element belongs to;</li>\n<li>the element from the source being aggregated;</li>\n</ul>\n<p>If <code>operation</code> returns <code>Some(element)</code> then the accumulator is updated with <code>element</code>,\notherwise the previous accumulation is discarded.</p>\n<p>Return a <code>HashMap</code> associating the key of each group with the result of aggregation of\nthat group’s elements. If the aggregation of the last element of a group discards the\naccumulator then there won’t be an entry associated to that group’s key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>data = <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>lookup = data.into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">4</span>)\n    .aggregate(|acc, _key, val| {\n        <span class=\"kw\">if </span>val == <span class=\"number\">0 </span>|| val == <span class=\"number\">10 </span>{\n            <span class=\"prelude-val\">None\n        </span>} <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">Some</span>(acc.unwrap_or(<span class=\"number\">0</span>) + val)\n        }\n    });\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">4</span>);        <span class=\"comment\">// 0 resets the accumulator so only 4 is summed\n</span><span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">5 </span>+ <span class=\"number\">9</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// 10 resets the accumulator and nothing is summed afterward\n</span><span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>], <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);      <span class=\"comment\">// The final keys are only 0, 1 and 2</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#140-148\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.fold\" class=\"fn\">fold</a>&lt;FO, R&gt;(self, init: R, operation: FO) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    FO: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(R, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; R,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and applies <code>operation</code> to the elements\nof each group sequentially, passing the previously accumulated value, a reference to the key\nand the current element as arguments, and stores the results in a new map.</p>\n<p><code>init</code> is the value from which will be cloned the initial value of each accumulator.</p>\n<p><code>operation</code> is a function that is invoked on each element with the following parameters:</p>\n<ul>\n<li>the current value of the accumulator of the group;</li>\n<li>a reference to the key of the group this element belongs to;</li>\n<li>the element from the source being accumulated.</li>\n</ul>\n<p>Return a <code>HashMap</code> associating the key of each group with the result of folding that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = (<span class=\"number\">1</span>..=<span class=\"number\">7</span>)\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .fold(<span class=\"number\">0</span>, |acc, _key, val| acc + val);\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3 </span>+ <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">1 </span>+ <span class=\"number\">4 </span>+ <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">2 </span>+ <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold_first\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#177-186\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.fold_first\" class=\"fn\">fold_first</a>&lt;FO&gt;(self, operation: FO) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    FO: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(V, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; V,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and applies <code>operation</code> to the elements\nof each group sequentially, passing the previously accumulated value, a reference to the key\nand the current element as arguments, and stores the results in a new map.</p>\n<p>This is similar to <a href=\"#tymethod.fold\"><code>fold</code></a> but the initial value of the accumulator is the first element of the group.</p>\n<p><code>operation</code> is a function that is invoked on each element with the following parameters:</p>\n<ul>\n<li>the current value of the accumulator of the group;</li>\n<li>a reference to the key of the group this element belongs to;</li>\n<li>the element from the source being accumulated.</li>\n</ul>\n<p>Return a <code>HashMap</code> associating the key of each group with the result of folding that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = (<span class=\"number\">1</span>..=<span class=\"number\">7</span>)\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .fold_first(|acc, _key, val| acc + val);\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3 </span>+ <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">1 </span>+ <span class=\"number\">4 </span>+ <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">2 </span>+ <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#206-216\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.collect\" class=\"fn\">collect</a>&lt;C&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and collects the elements of each group in\nan instance of <code>C</code>. The iteration order is preserved when inserting elements.</p>\n<p>Return a <code>HashMap</code> associating the key of each group with the collection containing that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n<span class=\"kw\">use </span>std::collections::HashSet;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .collect::&lt;HashSet&lt;<span class=\"kw\">_</span>&gt;&gt;();\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>].into_iter().collect::&lt;HashSet&lt;<span class=\"kw\">_</span>&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>].into_iter().collect::&lt;HashSet&lt;<span class=\"kw\">_</span>&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">5</span>].into_iter().collect::&lt;HashSet&lt;<span class=\"kw\">_</span>&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#236-240\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.max\" class=\"fn\">max</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and finds the maximum of each group.</p>\n<p>If several elements are equally maximum, the last element is picked.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the maximum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .max();\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">12</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#261-268\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and finds the maximum of each group\nwith respect to the specified comparison function.</p>\n<p>If several elements are equally maximum, the last element is picked.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the maximum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .max_by(|_key, x, y| y.cmp(x));\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_by_key\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#289-294\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.max_by_key\" class=\"fn\">max_by_key</a>&lt;F, CK&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>) -&gt; CK,\n    CK: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and finds the element of each group\nthat gives the maximum from the specified function.</p>\n<p>If several elements are equally maximum, the last element is picked.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the maximum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .max_by_key(|_key, <span class=\"kw-2\">&amp;</span>val| val % <span class=\"number\">4</span>);\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#314-318\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.min\" class=\"fn\">min</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and finds the minimum of each group.</p>\n<p>If several elements are equally minimum, the first element is picked.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the minimum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .min();\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#339-346\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and finds the minimum of each group\nwith respect to the specified comparison function.</p>\n<p>If several elements are equally minimum, the first element is picked.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the minimum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .min_by(|_key, x, y| y.cmp(x));\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">12</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_by_key\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#367-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.min_by_key\" class=\"fn\">min_by_key</a>&lt;F, CK&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>) -&gt; CK,\n    CK: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and finds the element of each group\nthat gives the minimum from the specified function.</p>\n<p>If several elements are equally minimum, the first element is picked.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the minimum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .min_by_key(|_key, <span class=\"kw-2\">&amp;</span>val| val % <span class=\"number\">4</span>);\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">12</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minmax\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#401-405\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.minmax\" class=\"fn\">minmax</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, <a class=\"enum\" href=\"itertools/enum.MinMaxResult.html\" title=\"enum itertools::MinMaxResult\">MinMaxResult</a>&lt;V&gt;&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and find the maximum and minimum of\neach group.</p>\n<p>If several elements are equally maximum, the last element is picked.\nIf several elements are equally minimum, the first element is picked.</p>\n<p>See <a href=\"../trait.Itertools.html#method.minmax\">.minmax()</a> for the non-grouping version.</p>\n<p>Differences from the non grouping version:</p>\n<ul>\n<li>It never produces a <code>MinMaxResult::NoElements</code></li>\n<li>It doesn’t have any speedup</li>\n</ul>\n<p>Returns a <code>HashMap</code> associating the key of each group with the minimum and maximum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n<span class=\"kw\">use </span>itertools::MinMaxResult::{OneElement, MinMax};\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .minmax();\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], MinMax(<span class=\"number\">3</span>, <span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], MinMax(<span class=\"number\">1</span>, <span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], OneElement(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minmax_by\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#430-455\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.minmax_by\" class=\"fn\">minmax_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, <a class=\"enum\" href=\"itertools/enum.MinMaxResult.html\" title=\"enum itertools::MinMaxResult\">MinMaxResult</a>&lt;V&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and find the maximum and minimum of\neach group with respect to the specified comparison function.</p>\n<p>If several elements are equally maximum, the last element is picked.\nIf several elements are equally minimum, the first element is picked.</p>\n<p>It has the same differences from the non-grouping version as <code>minmax</code>.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the minimum and maximum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n<span class=\"kw\">use </span>itertools::MinMaxResult::{OneElement, MinMax};\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .minmax_by(|_key, x, y| y.cmp(x));\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], MinMax(<span class=\"number\">12</span>, <span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], MinMax(<span class=\"number\">7</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], OneElement(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minmax_by_key\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#480-485\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.minmax_by_key\" class=\"fn\">minmax_by_key</a>&lt;F, CK&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, <a class=\"enum\" href=\"itertools/enum.MinMaxResult.html\" title=\"enum itertools::MinMaxResult\">MinMaxResult</a>&lt;V&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;V</a>) -&gt; CK,\n    CK: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and find the elements of each group\nthat gives the minimum and maximum from the specified function.</p>\n<p>If several elements are equally maximum, the last element is picked.\nIf several elements are equally minimum, the first element is picked.</p>\n<p>It has the same differences from the non-grouping version as <code>minmax</code>.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the minimum and maximum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n<span class=\"kw\">use </span>itertools::MinMaxResult::{OneElement, MinMax};\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .minmax_by_key(|_key, <span class=\"kw-2\">&amp;</span>val| val % <span class=\"number\">4</span>);\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], MinMax(<span class=\"number\">12</span>, <span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], MinMax(<span class=\"number\">4</span>, <span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], OneElement(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#506-510\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.sum\" class=\"fn\">sum</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;V, Output = V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and sums them.</p>\n<p>This is just a shorthand for <code>self.fold_first(|acc, _, val| acc + val)</code>.\nIt is more limited than <code>Iterator::sum</code> since it doesn’t use the <code>Sum</code> trait.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the sum of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .sum();\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3 </span>+ <span class=\"number\">9 </span>+ <span class=\"number\">12</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">1 </span>+ <span class=\"number\">4 </span>+ <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">5 </span>+ <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method\"><a class=\"src rightside\" href=\"src/itertools/grouping_map.rs.html#531-535\">Source</a><h4 class=\"code-header\">pub fn <a href=\"itertools/structs/struct.GroupingMap.html#tymethod.product\" class=\"fn\">product</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;V, Output = V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Groups elements from the <code>GroupingMap</code> source by key and multiply them.</p>\n<p>This is just a shorthand for <code>self.fold_first(|acc, _, val| acc * val)</code>.\nIt is more limited than <code>Iterator::product</code> since it doesn’t use the <code>Product</code> trait.</p>\n<p>Returns a <code>HashMap</code> associating the key of each group with the product of that group’s elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>itertools::Itertools;\n \n<span class=\"kw\">let </span>lookup = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>].into_iter()\n    .into_grouping_map_by(|<span class=\"kw-2\">&amp;</span>n| n % <span class=\"number\">3</span>)\n    .product();\n \n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>], <span class=\"number\">3 </span>* <span class=\"number\">9 </span>* <span class=\"number\">12</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">1 </span>* <span class=\"number\">4 </span>* <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(lookup[<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>], <span class=\"number\">5 </span>* <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(lookup.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details></div></details>",0,"itertools::grouping_map::GroupingMapBy"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[48585]}